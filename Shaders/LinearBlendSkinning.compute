#pragma kernel LinearBlendSkinning

RWStructuredBuffer<float4> _VertexBuffer;
// RWStructuredBuffer<float4> _AnimatedJointPositionsRet;
// RWStructuredBuffer<float4> _VerticesOffsetsWithJointsRet;
// RWStructuredBuffer<int> _IdsOfInfluenceJointsPerVertexRet;
// RWStructuredBuffer<float4x4> _JointsAccumulatedRotationsRet;

int _NumVertices;
StructuredBuffer<float4> _AnimatedJointPositions;
StructuredBuffer<float4x4> _JointsAccumulatedRotations;
StructuredBuffer<float4> _VerticesOffsetsAtTPose;
StructuredBuffer<int> _InfluenceJointsIdsPerVertex;
StructuredBuffer<float> _SkinningWeightsPerVertex;
StructuredBuffer<int> _InfluenceJointsNumberPerVertex;

[numthreads(1024,1,1)]
void LinearBlendSkinning (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    // if (id.x < _NumVertices) {
    //     _VertexBuffer[id.x*3 + 0] = _AnimatedJointPositions.Load(23)[1]; //_VertexBuffer[id.x*3 + 0] + _RandomFloat;
    //     _VertexBuffer[id.x*3 + 1] = 0;//_VertexBuffer[id.x*3 + 1];
    //     _VertexBuffer[id.x*3 + 2] = 0;//_VertexBuffer[id.x*3 + 2];
    // }

    if (id.x < _NumVertices) {

        _VertexBuffer[id.x] = 0;

        [loop] for (int j=0; j<_InfluenceJointsNumberPerVertex[id.x]; j++) {

            int influenceJointId = _InfluenceJointsIdsPerVertex[id.x*4 + j];

            _VertexBuffer[id.x] += _SkinningWeightsPerVertex[id.x*4 + j] * (mul(_JointsAccumulatedRotations[influenceJointId], _VerticesOffsetsAtTPose[id.x*4 + j]) + _AnimatedJointPositions[influenceJointId]);
        }
        // int influenceJointId = _InfluenceJointsIdsPerVertex[id.x*4 + id.y];
        // _VertexBuffer[id.x] += _SkinningWeightsPerVertex[id.x*4 + id.y] * (mul(_JointsAccumulatedRotations[influenceJointId], _VerticesOffsetsAtTPose[id.x*4 + id.y]) + _AnimatedJointPositions[influenceJointId]);

        

        
        // _VertexBuffer[id.x*3 + 0] = (mul(_JointsAccumulatedRotations[influenceJointId], _VerticesOffsetsWithJoints[id.x]) + _AnimatedJointPositions[influenceJointId])[0];
        // _VertexBuffer[id.x*3 + 1] = (mul(_JointsAccumulatedRotations[influenceJointId], _VerticesOffsetsWithJoints[id.x]) + _AnimatedJointPositions[influenceJointId])[1];
        // _VertexBuffer[id.x*3 + 2] = (mul(_JointsAccumulatedRotations[influenceJointId], _VerticesOffsetsWithJoints[id.x]) + _AnimatedJointPositions[influenceJointId])[2];

        // _VertexBuffer[id.x*3 + 0] = (_VerticesOffsetsWithJoints[id.x] + _AnimatedJointPositions[influenceJointId])[0];
        // _VertexBuffer[id.x*3 + 1] = (_VerticesOffsetsWithJoints[id.x] + _AnimatedJointPositions[influenceJointId])[1];
        // _VertexBuffer[id.x*3 + 2] = (_VerticesOffsetsWithJoints[id.x] + _AnimatedJointPositions[influenceJointId])[2];

        // _VertexBuffer[id.x] = _VerticesOffsetsWithJoints[id.x] + _AnimatedJointPositions[influenceJointId];

        // _AnimatedJointPositionsRet[id.x] = _AnimatedJointPositions[influenceJointId];

        // _VerticesOffsetsWithJointsRet[id.x] = _VerticesOffsetsWithJoints[id.x];

        // _IdsOfInfluenceJointsPerVertexRet[id.x] = influenceJointId;

        // _JointsAccumulatedRotationsRet[id.x] = transpose(_JointsAccumulatedRotations[influenceJointId]);
    }
    
}